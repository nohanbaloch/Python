import customtkinter as ctk
from tkinter import messagebox
import requests
import numpy as np
from sklearn.ensemble import IsolationForest
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.pyplot as plt
from PIL import Image, ImageTk
import io

NASA_API_KEY = ' '
WEATHER_API_KEY = ' '

def generate_sensor_data(num_points=100):
    return np.random.normal(25, 5, num_points).tolist()

def fetch_satellite_image(lat, lon):
    url = f"https://api.nasa.gov/planetary/earth/assets"
    params = {
        'lon': lon,
        'lat': lat,
        'dim': 0.1,
        'api_key': NASA_API_KEY
    }
    response = requests.get(url, params=params)
    if response.status_code == 200:
        data = response.json()
        return data.get('url')
    return None

def fetch_weather_data(lat, lon):
    url = f"http://api.openweathermap.org/data/2.5/weather"
    params = {
        'lat': lat,
        'lon': lon,
        'appid': WEATHER_API_KEY,
        'units': 'metric'
    }
    response = requests.get(url, params=params)
    return response.json() if response.status_code == 200 else None

def fetch_location_name(lat, lon):
    url = f"http://api.openweathermap.org/geo/1.0/reverse"
    params = {
        'lat': lat,
        'lon': lon,
        'limit': 1,
        'appid': WEATHER_API_KEY
    }
    response = requests.get(url, params=params)
    return response.json()[0].get('name', 'Unknown Location') if response.status_code == 200 else "Unknown Location"

def detect_anomalies(data):
    model = IsolationForest(contamination=0.1, random_state=42)
    predictions = model.fit_predict(np.array(data).reshape(-1, 1))
    return [i for i, val in enumerate(predictions) if val == -1]

def detect_wildfire(weather_data):
    temp = weather_data['main']['temp']
    humidity = weather_data['main']['humidity']
    wind_speed = weather_data['wind']['speed']
    return temp > 35 and humidity < 20 and wind_speed > 5

def plot_data(data, anomalies, wildfire_risk):
    fig, ax = plt.subplots()
    ax.plot(data, label='Sensor Data')
    ax.scatter(anomalies, [data[i] for i in anomalies], color='r', label='Anomalies')
    if wildfire_risk:
        ax.axhline(y=35, color='orange', linestyle='--', label='Wildfire Risk Threshold')
    ax.set_xlabel('Time')
    ax.set_ylabel('Temperature')
    ax.legend()
    ax.grid(True)
    return fig

class SensorWebApp(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("Sensor Web Project")
        self.geometry("1200x800")
        ctk.set_appearance_mode("Dark")
        ctk.set_default_color_theme("blue")

        self.sensor_data = generate_sensor_data()
        self.anomalies = []
        self.wildfire_risk = False

        self.create_layout()

    def create_layout(self):
        self.left_frame = ctk.CTkFrame(self, width=700)
        self.left_frame.pack(side="left", fill="both", expand=True, padx=20, pady=20)

        self.lat_entry = ctk.CTkEntry(self.left_frame, placeholder_text="Enter Latitude")
        self.lat_entry.pack(pady=10)

        self.lon_entry = ctk.CTkEntry(self.left_frame, placeholder_text="Enter Longitude")
        self.lon_entry.pack(pady=10)

        self.btn_fetch = ctk.CTkButton(self.left_frame, text="Fetch Location & Analyze", command=self.fetch_location_and_analyze)
        self.btn_fetch.pack(pady=20)

        self.weather_label = ctk.CTkLabel(self.left_frame, text="", wraplength=600, justify="left")
        self.weather_label.pack(pady=10)

        self.anomalies_canvas = ctk.CTkFrame(self.left_frame, width=700, height=350)
        self.anomalies_canvas.pack(pady=20)

        # Right Frame for satellite image fetching
        self.right_frame = ctk.CTkFrame(self, width=400)
        self.right_frame.pack(side="right", fill="y", padx=20, pady=20)

        self.image_label = ctk.CTkLabel(self.right_frame, text=" ", width=300, height=300)
        self.image_label.pack(pady=20)

        self.btn_fetch_image = ctk.CTkButton(self.right_frame, text="Show Satellite Image", command=self.fetch_image)
        self.btn_fetch_image.pack(pady=20)

    def fetch_location_and_analyze(self):
        try:
            lat = float(self.lat_entry.get())
            lon = float(self.lon_entry.get())
        except ValueError:
            messagebox.showerror("Invalid Input", "Please enter valid numerical values for latitude and longitude.")
            return

        location_name = fetch_location_name(lat, lon)
        weather_data = fetch_weather_data(lat, lon)

        if weather_data:
            weather_desc = weather_data['weather'][0]['description']
            temp = weather_data['main']['temp']
            humidity = weather_data['main']['humidity']
            wind_speed = weather_data['wind']['speed']

            self.wildfire_risk = detect_wildfire(weather_data)
            wildfire_status = "High Wildfire Risk!" if self.wildfire_risk else "No Wildfire Risk"

            self.weather_label.configure(
                text=f"Location: {location_name}\nWeather: {weather_desc.capitalize()}\nTemperature: {temp}Â°C\nHumidity: {humidity}%\nWind Speed: {wind_speed} m/s\n{wildfire_status}"
            )

        self.anomalies = detect_anomalies(self.sensor_data)
        fig = plot_data(self.sensor_data, self.anomalies, self.wildfire_risk)
        canvas = FigureCanvasTkAgg(fig, master=self.anomalies_canvas)
        canvas.draw()
        canvas.get_tk_widget().pack()

    def fetch_image(self):
        try:
            lat = float(self.lat_entry.get())
            lon = float(self.lon_entry.get())
        except ValueError:
            messagebox.showerror("Invalid Input", "Please enter valid numerical values for latitude and longitude.")
            return

        image_url = fetch_satellite_image(lat, lon)
        if image_url:
            response = requests.get(image_url)
            if response.status_code == 200:
                image_data = Image.open(io.BytesIO(response.content))
                image_data.thumbnail((300, 300))
                image = ImageTk.PhotoImage(image_data)
                self.image_label.configure(image=image)
                self.image_label.image = image
            else:
                messagebox.showerror("Error", "Failed to fetch the satellite image.")
        else:
            messagebox.showinfo("No Image", "No satellite image available for the specified location.")

if __name__ == "__main__":
    app = SensorWebApp()
    app.mainloop()
